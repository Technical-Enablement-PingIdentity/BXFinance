## this workflow is used for dev environments to add new product configurations and promote up

on:
  # Trigger the workflow on push or pull request,
  push:
    # branches-ignore:
    #   - qa
    #   - main
    #   - master
    #   - staging
    #   - development


name: Deploy Feature Env

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: "!contains(github.event.commits[0].message, '[skip ci]')"

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    - name: Install Dependencies
      run: |
        set -x
        curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.8/2020-09-18/bin/linux/amd64/aws-iam-authenticator
        chmod +x ./aws-iam-authenticator
        mkdir -p $HOME/bin && sudo cp ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
        mkdir ${HOME}/.kube
        echo "${{ secrets.KUBE_CONFIG_YAML }}" | base64 --decode > ${HOME}/.kube/config
        kubectl version
        kubectl get pods
        echo "ended install"
        echo ${{ github.event_name }}


      # if new branch, postman collection to create myping env
    # - name: Create MyPing Env
    #   # if: "contains( github.event_name , 'create')"
    #   # if will be handled in postman. tricky to manage from github actions. 
    #   run: ci_tools/run_postman.sh iac/createmyping.yaml
    #   env:
    #     ## These environment variables will be obfuscated in workflow logs.
    #     ## must use standard shell format
    #     P1_ADMIN_ENV_ID: ${{ secrets.P1_ADMIN_ENV_ID}}
    #     P1_ADMIN_ORG_ID: ${{ secrets.P1_ADMIN_ORG_ID}}
    #     P1_ADMIN_ENV_ROLE_ID: ${{ secrets.P1_ADMIN_ENV_ROLE_ID}}
    #     PF_ADMIN_WORKER_ID: ${{ secrets.PF_ADMIN_WORKER_ID}}
    #     PF_ADMIN_WORKER_SECRET: ${{ secrets.PF_ADMIN_WORKER_SECRET}}
    #     SLACK_WEBHOOK_ID: ${{ secrets.SLACK_WEBHOOK_ID }}
      # eval sha of profile dirs and deploy chart
    - name: Deploy Environment
      run: |
        export REF=$(echo $GITHUB_REF | sed -e "s#refs/heads/##g")
        sh ci_tools/env_deploy.sh
      env:
        PING_IDENTITY_DEVOPS_USER_BASE64: ${{ secrets.PING_IDENTITY_DEVOPS_USER_BASE64 }}
        PING_IDENTITY_DEVOPS_KEY_BASE64: ${{ secrets.PING_IDENTITY_DEVOPS_KEY_BASE64 }}
        GCR_CONFIG_JSON_BASE64: ${{ secrets.GCR_CONFIG_JSON_BASE64 }}
        PA_LIC_BASE64: ${{ secrets.PA_LIC_BASE64 }}
        PF_LIC_BASE64: ${{ secrets.PF_LIC_BASE64 }}
        PD_LIC_BASE64: ${{ secrets.PD_LIC_BASE64 }}
        PDG_LIC_BASE64: ${{ secrets.PDG_LIC_BASE64 }}
    # - name: Integration Test
    #   run: ci_tools/run_postman.sh iac/integrationtest.yaml
    # - name: Environment Info
    #   run: echo "Your environment is ready, check Slack!"
        # set -a
        # source ci_tools/ci_tools.lib.sh
        # kubectl get ing -l app.kubernetes.io/instance=${RELEASE} -o=custom-columns="NAME:.metadata.name,HOST:.spec.rules[*].host"

    # - name: pull-request-action
    #   uses: vsoch/pull-request-action@1.0.12
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     PULL_REQUEST_BRANCH: "qa"
    #     PASS_IF_EXISTS: "yes"
    #     PASS_ON_ERROR: "yes"